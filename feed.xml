<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://himal2007.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://himal2007.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-03-30T21:24:17+00:00</updated><id>https://himal2007.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html"></title><link href="https://himal2007.github.io/blog/2025/2025-03-26-python-functions-vs-classes/" rel="alternate" type="text/html" title=""/><published>2025-03-30T21:24:17+00:00</published><updated>2025-03-30T21:24:17+00:00</updated><id>https://himal2007.github.io/blog/2025/2025-03-26-python-functions-vs-classes</id><content type="html" xml:base="https://himal2007.github.io/blog/2025/2025-03-26-python-functions-vs-classes/"><![CDATA[<h1 id="draft-python-functions-vs-classes-for-building-powerful-python-cli-tools-with-bioinformatics-examples"><strong>[DRAFT] Python functions vs. classes for building powerful Python CLI tools with Bioinformatics examples</strong></h1> <p>Python has been my go-to language since I started working as a bioinformatician. However, I‚Äôve realised that I haven‚Äôt used classes as much as I should have.</p> <p>In the fast-moving field of bioinformatics, Python is a top choice for building command-line interface (CLI) tools‚Äîthanks to its simplicity, rich ecosystem, and flexibility. Whether you‚Äôre writing a quick script to process genomic data or developing a complex pipeline for sequence analysis, choosing between functions and classes can significantly impact your code‚Äôs efficiency, maintainability, and scalability.</p> <p>In this blog, we‚Äôll break down the key differences between functions and classes, explore when to use each, and provide real-world bioinformatics examples. Along the way, I‚Äôll share insights into how getting comfortable with Python classes can enhance your ability to build robust CLI tools.</p> <h2 id="functions-vs-classes-a-visual-overview"><strong>Functions vs. classes: a visual overview</strong></h2> <p>To illustrate the fundamental difference between functions and classes, here‚Äôs a simple diagram:</p> <pre><code class="language-mermaid">graph TD
  subgraph Functions
    A[Input] --&gt;|Processed by function| B[Output]
  end

  subgraph Classes
    C[Input] --&gt;|Processed by constructor| D[Instance with State]
    D --&gt;|Method Call| E[Output]
  end
</code></pre> <ul> <li><strong>Functions</strong> take an input, process it, and return an output.</li> <li><strong>Classes</strong> not only take input and produce output but also maintain a state, allowing data to persist across method calls.</li> </ul> <hr/> <h2 id="python-functions-making-your-code-reusable"><strong>Python functions: making your code reusable</strong></h2> <p>One of the core principles of programming is <strong>DRY</strong>‚Äî<em>‚ÄúDon‚Äôt Repeat Yourself.‚Äù</em> I‚Äôve relied on functions to make my code more reusable and efficient from the start. Functions are <strong>straightforward and simple</strong>. They act as self-contained blocks of code designed to perform a specific task. Functions are particularly useful when you need to repeat an operation multiple times but don‚Äôt want to rewrite the same code. They are perfect for operations that don‚Äôt require maintaining state between calls.</p> <h3 id="hmm-what-does-maintaining-state-between-calls-mean"><strong>Hmm‚Ä¶ What Does ‚ÄúMaintaining State Between Calls‚Äù Mean?ü§î</strong></h3> <p>When we say functions don‚Äôt ‚Äúmaintain state between calls,‚Äù it simply means that every time you call a function, it starts fresh‚Äîforgetting anything from previous runs. Functions take input, process it, and return an output without remembering any past data.</p> <p>For example, if you construct a function to calculate the <strong>GC content</strong> (the percentage of guanine and cytosine) in a DNA sequence‚Äîa common task in bioinformatics‚Äîyou can use a simple function like this:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">gc_content</span><span class="p">(</span><span class="n">sequence</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">Calculate the GC content percentage of a DNA sequence.</span><span class="sh">"""</span>
    <span class="n">gc_count</span> <span class="o">=</span> <span class="n">sequence</span><span class="p">.</span><span class="nf">count</span><span class="p">(</span><span class="sh">"</span><span class="s">G</span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="n">sequence</span><span class="p">.</span><span class="nf">count</span><span class="p">(</span><span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="mi">100</span> <span class="o">*</span> <span class="n">gc_count</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">sequence</span><span class="p">)</span>

<span class="c1"># Usage
</span><span class="n">dna_seq</span> <span class="o">=</span> <span class="sh">"</span><span class="s">ATGCGATACGCTTGC</span><span class="sh">"</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">GC Content:</span><span class="sh">"</span><span class="p">,</span> <span class="nf">gc_content</span><span class="p">(</span><span class="n">dna_seq</span><span class="p">))</span>
</code></pre></div></div> <p>Here, <code class="language-plaintext highlighter-rouge">gc_content</code> is the <strong>function name</strong>, and <code class="language-plaintext highlighter-rouge">sequence</code> is a <strong>parameter</strong> that allows you to pass any DNA sequence as input. The function counts the number of <strong>G</strong> and <strong>C</strong> nucleotides in the sequence and returns the GC content percentage. <code class="language-plaintext highlighter-rouge">sequence.count("G") + sequence.count("C")</code> counts the <strong>G</strong> and <strong>C</strong> nucleotides, while <code class="language-plaintext highlighter-rouge">return 100 * gc_count / len(sequence)</code> computes and returns the GC content percentage.</p> <p>Functions like this are great when you have <strong>clear inputs and outputs</strong> without needing to store extra data. But what if your program requires keeping track of information across multiple calls? That‚Äôs where <strong>classes</strong> come in‚Äîlet‚Äôs explore that next!</p> <hr/> <h2 id="python-classes-organising-data-and-behavior"><strong>Python classes: organising data and behavior</strong></h2> <p>While functions are great for simple, reusable operations, <strong>classes</strong> take things a step further. Classes act as blueprints for creating objects that bundle both <strong>data</strong> and <strong>behavior</strong> (methods). They are incredibly useful when you want to maintain <strong>state</strong> between calls or model complex entities. In bioinformatics, this is particularly relevant when you need to represent biological sequences, genes, or proteins.</p> <p>Imagine you‚Äôre developing a <strong>bioinformatics CLI tool</strong> that processes various biological sequence records. Instead of passing raw data between functions, you can create a <code class="language-plaintext highlighter-rouge">SequenceRecord</code> class to encapsulate relevant properties (like the sequence ID and nucleotide string) alongside methods for operations such as <strong>transcription</strong> or <strong>reverse complement calculation</strong>. Note it is a norm to name the class in a Pascal case, i.e. each word starts with a uppercase letter without spaces (e.g. <code class="language-plaintext highlighter-rouge">SequenceRecord</code> instead of <code class="language-plaintext highlighter-rouge">sequence_record</code>).</p> <h3 id="example-using-a-class-for-sequence-records"><strong>Example: using a class for sequence records</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SequenceRecord</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">identifier</span><span class="p">,</span> <span class="n">sequence</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="n">identifier</span>
        <span class="n">self</span><span class="p">.</span><span class="n">sequence</span> <span class="o">=</span> <span class="n">sequence</span>

    <span class="k">def</span> <span class="nf">gc_content</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">gc_count</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">sequence</span><span class="p">.</span><span class="nf">count</span><span class="p">(</span><span class="sh">"</span><span class="s">G</span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">sequence</span><span class="p">.</span><span class="nf">count</span><span class="p">(</span><span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="mi">100</span> <span class="o">*</span> <span class="n">gc_count</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">sequence</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">reverse_complement</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">complement</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">G</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">G</span><span class="sh">"</span><span class="p">}</span>
        <span class="k">return</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">complement</span><span class="p">[</span><span class="n">base</span><span class="p">]</span> <span class="k">for</span> <span class="n">base</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">sequence</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>

<span class="c1"># Usage of SequenceRecord class
</span><span class="n">record</span> <span class="o">=</span> <span class="nc">SequenceRecord</span><span class="p">(</span><span class="sh">"</span><span class="s">seq1</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ATGCGATACGCTTGC</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Accessing object properties and methods
</span><span class="nf">print</span><span class="p">(</span><span class="n">record</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Sequence:</span><span class="sh">"</span><span class="p">,</span> <span class="n">record</span><span class="p">.</span><span class="n">sequence</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Identifier:</span><span class="sh">"</span><span class="p">,</span> <span class="n">record</span><span class="p">.</span><span class="n">identifier</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">GC Content:</span><span class="sh">"</span><span class="p">,</span> <span class="n">record</span><span class="p">.</span><span class="nf">gc_content</span><span class="p">())</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Reverse Complement:</span><span class="sh">"</span><span class="p">,</span> <span class="n">record</span><span class="p">.</span><span class="nf">reverse_complement</span><span class="p">())</span>
</code></pre></div></div> <h3 id="output"><strong>Output:</strong></h3> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">&lt;__main__.SequenceRecord object at 0x0000023EE513CF10&gt;</span><span class="w">
</span><span class="go">Sequence: ATGCGATACGCTTGC
Identifier: seq1
GC Content: 53.33%
Reverse Complement: GCAAGCGTATCGCAT
</span></code></pre></div></div> <p>Note, when you print the <code class="language-plaintext highlighter-rouge">record</code> object by itself, it shows the memory address of the object. The class <code class="language-plaintext highlighter-rouge">SequenceRecord</code> bundles related data and methods together, making it easier to manage and manipulate sequence records. In this example, there are two methods: <code class="language-plaintext highlighter-rouge">gc_content</code> and <code class="language-plaintext highlighter-rouge">reverse_complement</code>, which operate on the sequence data stored in the object. <code class="language-plaintext highlighter-rouge">record</code> is an <strong>instance</strong> of the <code class="language-plaintext highlighter-rouge">SequenceRecord</code> class, and you can call its methods to perform operations on the sequence data. _If you want an analogy, think of a class as a form that needs to be filled out. The instance of the class is the filled-out form, which contains the data you entered._Each instance (like <code class="language-plaintext highlighter-rouge">record</code>) contains unique data but follows the same structure. By using a class, you can group related methods and state together, making it easier to manage complex workflows‚Äîespecially when your CLI tool must handle multiple types of data.</p> <hr/> <h2 id="when-to-use-functions-vs-classes"><strong>When to use functions vs. classes</strong></h2> <h3 id="simplicity-vs-structure"><strong>Simplicity vs. Structure</strong></h3> <table> <thead> <tr> <th>Use Functions When‚Ä¶</th> <th>Use Classes When‚Ä¶</th> </tr> </thead> <tbody> <tr> <td>Your task is <strong>simple and stateless</strong></td> <td>You need to <strong>group related data and behavior</strong></td> </tr> <tr> <td>You just need a <strong>single reusable operation</strong></td> <td>Your code requires <strong>maintaining state</strong> between calls</td> </tr> <tr> <td>You want a <strong>quick, lightweight approach</strong></td> <td>You‚Äôre working with <strong>complex data structures</strong></td> </tr> <tr> <td>Example: Computing <strong>GC content</strong></td> <td>Example: Representing <strong>biological sequences</strong></td> </tr> </tbody> </table> <p>In bioinformatics, functions work best for <strong>small, focused tasks</strong>, while classes shine when dealing with <strong>structured data</strong> like <strong>genes, proteins, or sequence records</strong>.</p> <hr/> <h2 id="building-cli-tools-combining-functions-and-classes"><strong>Building CLI tools: combining functions and classes</strong></h2> <p>Modern <strong>Python CLI tools</strong> often mix both approaches. Libraries like <strong>argparse</strong> or <strong>Click</strong> help process command-line arguments while keeping the core logic clean and modular. Let‚Äôs look at an example:</p> <h3 id="example-fasta-file-parser-with-a-cli"><strong>Example: FASTA file parser with a CLI</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">argparse</span>

<span class="k">class</span> <span class="nc">FastaRecord</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">identifier</span><span class="p">,</span> <span class="n">sequence</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="n">identifier</span>
        <span class="n">self</span><span class="p">.</span><span class="n">sequence</span> <span class="o">=</span> <span class="n">sequence</span>

    <span class="k">def</span> <span class="nf">gc_content</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">gc_count</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">sequence</span><span class="p">.</span><span class="nf">count</span><span class="p">(</span><span class="sh">"</span><span class="s">G</span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">sequence</span><span class="p">.</span><span class="nf">count</span><span class="p">(</span><span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="mi">100</span> <span class="o">*</span> <span class="n">gc_count</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">sequence</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">parse_fasta</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
    <span class="n">records</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">identifier</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">seq_lines</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">line</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">&gt;</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">identifier</span><span class="p">:</span>
                    <span class="n">records</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">FastaRecord</span><span class="p">(</span><span class="n">identifier</span><span class="p">,</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">seq_lines</span><span class="p">)))</span>
                <span class="n">identifier</span> <span class="o">=</span> <span class="n">line</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>  <span class="c1"># Remove '&gt;'
</span>                <span class="n">seq_lines</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">seq_lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">identifier</span><span class="p">:</span>
            <span class="n">records</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">FastaRecord</span><span class="p">(</span><span class="n">identifier</span><span class="p">,</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">seq_lines</span><span class="p">)))</span>
    <span class="k">return</span> <span class="n">records</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Process FASTA files and compute GC content.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">fasta_file</span><span class="sh">"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Path to the FASTA file</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="n">records</span> <span class="o">=</span> <span class="nf">parse_fasta</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">fasta_file</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">record</span> <span class="ow">in</span> <span class="n">records</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">record</span><span class="p">.</span><span class="n">identifier</span><span class="si">}</span><span class="s">: GC Content = </span><span class="si">{</span><span class="n">record</span><span class="p">.</span><span class="nf">gc_content</span><span class="p">()</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s">%</span><span class="sh">"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div> <h3 id="how-this-code-works"><strong>How this code works</strong></h3> <ol> <li><strong><code class="language-plaintext highlighter-rouge">FastaRecord</code> Class:</strong> Stores the sequence <strong>ID</strong> and <strong>nucleotide string</strong>, providing a method to compute <strong>GC content</strong>.</li> <li><strong><code class="language-plaintext highlighter-rouge">parse_fasta</code> Function:</strong> Reads a <strong>FASTA file</strong>, extracts sequence data, and creates <code class="language-plaintext highlighter-rouge">FastaRecord</code> objects.</li> <li><strong><code class="language-plaintext highlighter-rouge">main</code> Function:</strong> Uses <strong>argparse</strong> to accept a <strong>file path</strong> as input, then processes and prints GC content for each sequence in the file.</li> </ol> <h4 id="running-the-cli-tool-on-real-data"><strong>Running the CLI Tool on real data</strong></h4> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># copy the python code above into a file called fasta_gc.py</span>
nano fasta_gc.py
<span class="c"># download a sequence file of a sample bacterial genome of Haemophilus influenzae</span>
wget https://raw.githubusercontent.com/MDU-PHL/hicap/refs/heads/master/example/Hi75.fasta
<span class="c"># view the FASTA file</span>
less Hi75.fasta
<span class="c"># run the CLI tool to compute GC content and print the first few lines of output</span>
python fasta_gc.py Hi75.fasta | <span class="nb">head</span>
</code></pre></div></div> <h3 id="sample-output"><strong>Sample output:</strong></h3> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">NODE_1: GC Content = 37.41%
NODE_2: GC Content = 37.34%
NODE_3: GC Content = 37.73%
NODE_4: GC Content = 38.46%
NODE_5: GC Content = 37.63%
</span></code></pre></div></div> <p>Viola! You‚Äôve built a simple CLI tool to parse FASTA files and compute GC content and tested it on a real dataset.</p> <p>With this approach, we <strong>separate concerns</strong>:</p> <ul> <li><strong>File parsing</strong> is handled by a <strong>function</strong> (<code class="language-plaintext highlighter-rouge">parse_fasta</code>).</li> <li><strong>Sequence representation and operations</strong> are handled by a <strong>class</strong> (<code class="language-plaintext highlighter-rouge">FastaRecord</code>).</li> <li><strong>Command-line interaction</strong> is handled by <strong>argparse</strong> in the <code class="language-plaintext highlighter-rouge">main()</code> function.</li> </ul> <p>This <strong>modular design</strong> makes it easier to test, maintain, and extend.</p> <hr/> <p>If you are interested in diving deeper, there‚Äôs a whole philosophy of <strong>Object-Oriented Programming (OOP)</strong> built around classes. Python is a <strong>dynamic</strong> language that supports both <strong>functional</strong> and <strong>object-oriented</strong> programming.</p> <ul> <li><strong>Some languages, like Java, are class-heavy</strong>, forcing everything into objects.</li> <li><strong>Others, like Haskell, follow a functional paradigm</strong>, relying entirely on pure functions.</li> <li><strong>Python gives you the best of both worlds</strong>, allowing you to choose the right tool for the job.</li> </ul> <h2 id="finding-the-right-balance"><strong>Finding the Right Balance</strong></h2> <p>If you‚Äôve been writing <strong>large, monolithic functions</strong>, consider <strong>refactoring your code into classes</strong> for better structure. However, <strong>not everything needs to be a class</strong>‚Äîsometimes, a well-designed function is the simplest and most effective approach.</p> <hr/> <h2 id="final-thoughts"><strong>Final Thoughts</strong></h2> <p>Understanding the differences between <strong>functions and classes</strong> in Python is essential for writing <strong>clean, efficient, and scalable bioinformatics tools</strong>. By thoughtfully combining both, you can build <strong>powerful CLI tools</strong> that streamline your workflow and handle <strong>complex biological data</strong> with ease.</p> <p>For further exploration, check out these resources:</p> <ul> <li><a href="https://realpython.com/python3-object-oriented-programming/">Object-Oriented Programming (OOP) in Python</a></li> <li><a href="https://biopython.org/docs/latest/Tutorial/chapter_introduction.html">Biopython Tutorial and Cookbook</a></li> <li><a href="https://simonwillison.net/2023/Sep/30/cli-tools-python/">Things I‚Äôve Learned About Building CLI Tools in Python ‚Äì Simon Willison</a></li> </ul> <p>Keep experimenting, keep coding, and most importantly‚Äîhave fun!</p> <p>Happy coding! üòä</p>]]></content><author><name></name></author></entry><entry><title type="html">Testing changes in your Python Packages with GitHub Actions Workflow</title><link href="https://himal2007.github.io/blog/2025/github-actions-workflow/" rel="alternate" type="text/html" title="Testing changes in your Python Packages with GitHub Actions Workflow"/><published>2025-01-26T00:00:00+00:00</published><updated>2025-01-26T00:00:00+00:00</updated><id>https://himal2007.github.io/blog/2025/github-actions-workflow</id><content type="html" xml:base="https://himal2007.github.io/blog/2025/github-actions-workflow/"><![CDATA[<h1 id="testing-changes-in-your-python-packages-with-github-actions-workflow">Testing changes in your Python Packages with GitHub Actions Workflow</h1> <p>Working in public health, I‚Äôve learned that maintaining bioinformatics tools is a bit like being a gardener ‚Äì you need to constantly tend to your tools while ensuring they continue to work reliably. As I make updates to improve these tools, one of the challenges has been making sure that newer versions produce consistent results. After all, when these tools are part of critical public health pipelines, unexpected changes in output could have significant downstream effects.</p> <p>Like many developers, I used to spend countless hours manually testing for changes between versions ‚Äì a process that was not only time-consuming but prone to human error. That was until I discovered GitHub Actions, a game-changing automation tool that transformed my development workflow. Think of it as having a dedicated assistant who tirelessly checks your work, making sure everything runs smoothly across different versions.</p> <p>GitHub Actions has become my reliable partner in ensuring code quality and consistency. It‚Äôs a powerful platform that lets you define, manage, and automatically execute tasks directly within your repository. The best part? It catches potential issues before they can impact production environments, saving valuable time and reducing headaches.</p> <p>In this blog post, I‚Äôll walk you through how to harness the power of GitHub Actions to create custom workflows that automatically test for changes that you make on your projects. We‚Äôll use a real-world example of a bioinformatics tool called <em>hicap</em>, which we use for serotyping <em>Haemophilus influenzae</em>. Whether you‚Äôre working in bioinformatics or another field, you‚Äôll learn how to implement these automated testing workflows to make your development process more efficient and reliable.</p> <h2 id="what-are-github-actions">What are GitHub Actions?</h2> <p>GitHub Actions is a continuous integration and continuous delivery (CI/CD) platform that automates your software development workflows right in your GitHub repository. Think of it as your personal robot assistant that can:</p> <ul> <li>Run your tests automatically</li> <li>Build your packages</li> <li>Deploy your applications</li> <li>And much more!</li> </ul> <h2 id="key-concepts">Key Concepts</h2> <p>Before diving in, let‚Äôs understand some basic terminology:</p> <ol> <li> <p><strong>Workflow</strong>: A configurable automated process made up of one or more jobs. It‚Äôs defined in a YAML file in your repository‚Äôs <code class="language-plaintext highlighter-rouge">.github/workflows</code> directory.</p> </li> <li><strong>Event</strong>: A specific activity that triggers a workflow, like: <ul> <li>Push to a repository</li> <li>Pull request creation</li> <li>Release publication</li> <li>Manual trigger (workflow_dispatch) You can read more about all the available events in the <a href="https://docs.github.com/en/actions/reference/events-that-trigger-workflows">GitHub Actions documentation</a>.</li> </ul> </li> <li> <p><strong>Job</strong>: A set of steps that execute on the same runner (virtual machine).</p> </li> <li> <p><strong>Step</strong>: An individual task that can run commands or actions.</p> </li> <li><strong>Action</strong>: A reusable unit of code that can be used in your workflow.</li> </ol> <h2 id="creating-your-first-workflow-a-step-by-step-guide">Creating Your First Workflow: A Step-by-Step Guide</h2> <p>Let‚Äôs break down how to create a testing workflow using <code class="language-plaintext highlighter-rouge">hicap</code> as our example.</p> <h3 id="step-1-setting-up-the-workflow-file">Step 1: Setting Up the Workflow File</h3> <p>Create a new file in your repository at <code class="language-plaintext highlighter-rouge">.github/workflows/test.yml</code>. The basic structure looks like this:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Hicap Test Workflow</span>
<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
  <span class="na">release</span><span class="pi">:</span>
    <span class="na">types</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">created</span><span class="pi">,</span> <span class="nv">published</span><span class="pi">]</span>
</code></pre></div></div> <p>This header section defines:</p> <ul> <li>The workflow name</li> <li>When it should run. The above configuration triggers the workflow both manually (on manual trigger) and automatically (when a release is created or published).</li> </ul> <h3 id="step-2-defining-the-job">Step 2: Defining the Job</h3> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">jobs</span><span class="pi">:</span>
  <span class="na">test-and-compare</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
</code></pre></div></div> <p>Here we:</p> <ul> <li>Define a job named ‚Äútest-and-compare‚Äù</li> <li>Specify it should run on the latest Ubuntu virtual machine.</li> </ul> <p>Github provides various virtual machines for running workflows, such as <code class="language-plaintext highlighter-rouge">windows-latest</code>, <code class="language-plaintext highlighter-rouge">macos-latest</code>, and <code class="language-plaintext highlighter-rouge">ubuntu-latest</code> or with specific versions <code class="language-plaintext highlighter-rouge">ubuntu-20.04</code>, <code class="language-plaintext highlighter-rouge">windows-2019</code>, etc.</p> <h3 id="step-3-setting-up-the-environment">Step 3: Setting Up the Environment</h3> <p>Let‚Äôs look at the key steps for environment setup:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">steps</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout current code</span>
    <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>

  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set up Conda with Mamba</span>
    <span class="na">uses</span><span class="pi">:</span> <span class="s">conda-incubator/setup-miniconda@v3</span>
    <span class="na">with</span><span class="pi">:</span>
      <span class="na">miniforge-variant</span><span class="pi">:</span> <span class="s">Miniforge3</span>
      <span class="na">miniforge-version</span><span class="pi">:</span> <span class="s">latest</span>
      <span class="na">use-mamba</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="na">activate-environment</span><span class="pi">:</span> <span class="s">test</span>
</code></pre></div></div> <p>These steps:</p> <ol> <li>Check out your repository code</li> <li>Set up Conda with Mamba for package management</li> </ol> <details> <summary><strong>More about actions</strong></summary> GitHub Actions are custom applications that can be used to automate tasks in your software development lifecycle. You can create and publish your own actions, or use actions shared by the community from the <a href="https://github.com/marketplace?type=actions">GitHub Marketplace</a>. <details> <summary><strong>Creating and Publishing Actions</strong></summary> You can create your own actions by defining them in a repository. Actions can be written in JavaScript or as Docker containers. Once created, you can publish your actions to the GitHub Marketplace to share them with the community. </details> <details> <summary><strong>Using Actions from the Marketplace</strong></summary> To use an action from the GitHub Marketplace, you can reference it in your workflow file using the <code>uses</code> keyword. For example: <pre><code class="language-yaml">steps:
     - name: Use a Marketplace action
       uses: actions/checkout@v4</code></pre> </details> <details> <summary><strong>Using Actions from Other Repositories</strong></summary> You can also use actions from other repositories by specifying the repository name and version. For example: <pre><code class="language-yaml">steps:
    - name: Use an action from another repository
      uses: owner/repo@v1</code></pre> </details> </details> <h3 id="step-4-installing-dependencies">Step 4: Installing Dependencies</h3> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Create Conda environment from YAML</span>
    <span class="na">shell</span><span class="pi">:</span> <span class="s">bash -el {0}</span>
    <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
      <span class="s">mamba env create -f environment.yml</span>
</code></pre></div></div> <p>This step creates a Conda environment using your <code class="language-plaintext highlighter-rouge">environment.yml</code> file, which should list all your package dependencies.</p> <p>üí°<strong>Pro Tip</strong>: I export the environment file from my development environment using <code class="language-plaintext highlighter-rouge">conda env export --no-builds &gt; environment.yml</code>. The <code class="language-plaintext highlighter-rouge">--no-builds</code> flag ensures that the environment is platform-independent by excluding build-specific information.</p> <h2 id="testing-strategy-the-two-phase-approach">Testing Strategy: The Two-Phase Approach</h2> <p>In our example, we use two-phase testing strategy, one with the current release and another with the new changes made in the repository.</p> <p><strong>Phase 1: Test Current Release</strong></p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run hicap test (before update)</span>
    <span class="na">shell</span><span class="pi">:</span> <span class="s">bash -el {0}</span>
    <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
      <span class="s">source $CONDA/bin/activate hicap-env</span>
      <span class="s">mkdir -p test_old</span>
      <span class="s">hicap -q tests/data/type_a.fasta -o test_old</span>
</code></pre></div></div> <p>Sometimes we have to run <code class="language-plaintext highlighter-rouge">source $CONDA/bin/activate hicap-env</code> to activate the environment as it bypasses the need for conda initialisation in the shell session. The <code class="language-plaintext highlighter-rouge">shell</code> attribute is used to specify the shell to run the commands in. The <code class="language-plaintext highlighter-rouge">-e</code> flag causes the shell to exit immediately if any command exits with a non-zero status and <code class="language-plaintext highlighter-rouge">-l</code> flag ensures that the shell is a login shell. <code class="language-plaintext highlighter-rouge">{0}</code> is a placeholder for the scripts and commands to be run.</p> <p><strong>Phase 2: Test New Changes</strong></p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install editable hicap package</span>
    <span class="na">shell</span><span class="pi">:</span> <span class="s">bash -el {0}</span>
    <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
      <span class="s">source $CONDA/bin/activate hicap-env</span>
      <span class="s">pip install -e .</span>

  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run hicap test (after update)</span>
    <span class="na">shell</span><span class="pi">:</span> <span class="s">bash -el {0}</span>
    <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
      <span class="s">conda activate hicap-env</span>
      <span class="s">mkdir -p test_new</span>
      <span class="s">python3 hicap-runner.py -q tests/data/type_a.fasta -o test_new</span>
</code></pre></div></div> <p>This approach allows us to:</p> <ul> <li>Run tests on both the current release and the new changes</li> <li>Catch unexpected changes</li> <li>Ensure backward compatibility</li> </ul> <p><code class="language-plaintext highlighter-rouge">pip install -e .</code> installs the package in editable mode, allowing changes to the source code to be reflected immediately without needing to reinstall the package.</p> <h2 id="result-comparison-and-reporting">Result Comparison and Reporting</h2> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Compare test results</span>
    <span class="na">id</span><span class="pi">:</span> <span class="s">compare</span>
    <span class="na">shell</span><span class="pi">:</span> <span class="s">bash -el {0}</span>
    <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
      <span class="s">if ! diff -r test_old test_new &gt; diff_output.txt; then</span>
        <span class="s">echo "DIFF_DETECTED=true" &gt;&gt; $GITHUB_ENV</span>
      <span class="s">else</span>
        <span class="s">echo "DIFF_DETECTED=false" &gt;&gt; $GITHUB_ENV</span>
      <span class="s">fi</span>

  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print hicap test output</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">env.DIFF_DETECTED == 'true'</span>
    <span class="na">shell</span><span class="pi">:</span> <span class="s">bash -el {0}</span>
    <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
      <span class="s">echo "Differences found between test_old and test_new:"</span>
      <span class="s">cat diff_output.txt</span>
</code></pre></div></div> <p>This section:</p> <ul> <li>Compares the output of both test runs</li> <li>Reports any differences found</li> <li>Provides detailed output for debugging</li> </ul> <p>Here, <code class="language-plaintext highlighter-rouge">diff -r</code> recursively compares the contents of the two directories and writes the output to <code class="language-plaintext highlighter-rouge">diff_output.txt</code>. The <code class="language-plaintext highlighter-rouge">if</code> condition checks if differences were detected and if so, it sets an environment variable <code class="language-plaintext highlighter-rouge">DIFF_DETECTED</code> to <code class="language-plaintext highlighter-rouge">true</code> by appending to the <code class="language-plaintext highlighter-rouge">GITHUB_ENV</code> and vice versa. We can access custom environment variables in a workflow run using the <code class="language-plaintext highlighter-rouge">env</code> attribute as done in <code class="language-plaintext highlighter-rouge">env.DIFF_DETECTED</code>. The purpose of <code class="language-plaintext highlighter-rouge">id</code> field is to give a unique identifier to the step which can be used to refer to the step in the workflow. For example, in this workflow with <code class="language-plaintext highlighter-rouge">id: compare</code>, we can refer to this step as <code class="language-plaintext highlighter-rouge">steps.compare.outputs.&lt;variable_name&gt;</code>.</p> <p>In this example, we‚Äôve shown how to set up a testing workflow for a Python package using GitHub Actions using the <code class="language-plaintext highlighter-rouge">hicap</code> tool as an example. You can adapt this workflow to test your own Python packages by following the same principles. You can view the results of the workflow in the Actions tab of the repository. For an example of the workflow run where I deliberately introduced a change with the output that would print <code class="language-plaintext highlighter-rouge">hicap_version</code> as one of the columns, you can view the <a href="https://github.com/MDU-PHL/hicap/actions/runs/13092188787/job/36530138988">workflow run</a> where you can open the <code class="language-plaintext highlighter-rouge">Print hicap test output</code> step to see the differences detected. The differences are in both lines of the output where first line has extra column <code class="language-plaintext highlighter-rouge">hicap_version</code> and the second line has the version number of the tool. Also the order of <code class="language-plaintext highlighter-rouge">IS1016_hits</code> i.e. <code class="language-plaintext highlighter-rouge">bexA, bexB, bexD, bexC</code> is different in the two outputs.</p> <p>This is just a tip of the iceberg of what you can do with GitHub Actions. I am sure there are better ways to design the workflow and the action to make it more efficient and effective, even just for testing changes in the tool. This blog is written to make ourselves familiar with the concepts of GitHub Actions and how to design a workflow around it.</p> <p>In summary, GitHub Actions provides a powerful way to automate your Python package testing. By following this guide and examining the <code class="language-plaintext highlighter-rouge">hicap</code> example, you now have the foundation to create your own testing workflows. Remember to start simple and gradually add complexity as needed.</p> <h2 id="best-practices-and-tips">Best Practices and Tips</h2> <ol> <li><strong>Use Specific Versions</strong> <ul> <li>Always specify versions for actions (e.g., <code class="language-plaintext highlighter-rouge">actions/checkout@v4</code>)</li> <li>This prevents breaking changes from affecting your workflow</li> </ul> </li> <li><strong>Error Handling</strong> <ul> <li>Use <code class="language-plaintext highlighter-rouge">set -euo pipefail</code> in bash scripts</li> <li>This ensures your workflow fails fast on errors</li> </ul> </li> <li><strong>Environment Activation</strong> <ul> <li>Always use <code class="language-plaintext highlighter-rouge">shell: bash -el {0}</code> when working with Conda environments</li> <li>This ensures proper environment activation</li> </ul> </li> <li><strong>Clear Step Names</strong> <ul> <li>Use descriptive names for steps</li> <li>Makes it easier to debug when things go wrong</li> </ul> </li> </ol> <h2 id="resources-for-further-learning">Resources for Further Learning</h2> <ol> <li><a href="https://docs.github.com/en/actions">GitHub Actions Documentation</a></li> <li><a href="https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python">GitHub Actions for Python</a></li> <li><a href="https://github.com/conda-incubator/setup-miniconda">Conda with GitHub Actions</a></li> <li><a href="https://github.com/marketplace?type=actions">GitHub Actions Marketplace</a></li> </ol>]]></content><author><name>Himal Shrestha</name></author><category term="github"/><category term="github-actions"/><category term="python"/><category term="testing"/><category term="automation"/><category term="github-actions,"/><category term="python,"/><category term="testing,"/><category term="automation"/><summary type="html"><![CDATA[Learning how to design a GitHub Actions workflow to test for changes in a Python package.]]></summary></entry><entry><title type="html">Checking your GPU via WSL2</title><link href="https://himal2007.github.io/blog/2024/GPU-WSL2/" rel="alternate" type="text/html" title="Checking your GPU via WSL2"/><published>2024-12-17T15:59:00+00:00</published><updated>2024-12-17T15:59:00+00:00</updated><id>https://himal2007.github.io/blog/2024/GPU-WSL2</id><content type="html" xml:base="https://himal2007.github.io/blog/2024/GPU-WSL2/"><![CDATA[<h2 id="checking-your-nvidia-gpu-via-wsl2">Checking your NVIDIA GPU via WSL2</h2> <p>Like many computer science enthusiasts, I had a dream to build a powerful desktop that would make even the most ardent gamers-or in my case, bioinformaticians-pause in admiration. So, I went ahead and purchased a powerhouse machine, armed with a high-performance GPU packed with CUDA cores, perfect for deep learning and computational analysis. I also aptly named it ‚ÄúThe Beast‚Äù. Yet, my precious Beast has been sitting idle (for nearly two years after purchase) when it comes to actual data analysis. Sound familiar? If you‚Äôre a Windows user like me, sitting on untapped GPU potential, this is the guide for you on how to inspect your GPU via windows subsystem for linux 2 (WSL2). At least we got to start somewhere with harnessing the full potential of your NVIDIA GPU (most have NVIDIA GPUs, some have AMD GPUs) within the Windows ecosystem. Let me walk you through on inspecting your GPU via WSL2. Please note that this guide is for NVIDIA GPUs. Similar alternatives exist for AMD GPUs.</p> <h3 id="step-1-identifying-your-gpu">Step 1: Identifying Your GPU</h3> <p>To find out how many GPUs you have in WSL2, first, open your WSL2 terminal and check details using the <code class="language-plaintext highlighter-rouge">lspci</code> command. you might try using the <code class="language-plaintext highlighter-rouge">lspci</code> command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lspci | <span class="nb">grep</span> <span class="nt">-i</span> vga
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">lspci</code> lists all the Peripheral Component Interconnect (PCI) devices in your system, which includes network cards, sound cards, and GPUs. The <code class="language-plaintext highlighter-rouge">grep -i vga</code> part filters the output to show only VGA-compatible devices, which typically include your GPU. However, this command doesn‚Äôt always display your GPU in WSL2 (in my case as well). In that case, using the <code class="language-plaintext highlighter-rouge">nvidia-smi</code> command (<a href="https://unix.stackexchange.com/questions/370510/nvidia-smi-equivalent-for-amd-apu">alternative for AMD GPUs is <code class="language-plaintext highlighter-rouge">rocm-smi</code></a>) is a more reliable way to check your GPU.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvidia-smi
</code></pre></div></div> <p>This command provides detailed information about your GPU, including its name, driver version, and memory usage. For example, a typical output might look like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+-----------------------------------------------------------------------------------------+
| NVIDIA-SMI 560.35.02              Driver Version: 560.94         CUDA Version: 12.6     |
|-----------------------------------------+------------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |
|                                         |                        |               MIG M. |
|=========================================+========================+======================|
|   0  NVIDIA GeForce RTX 2060        On  |   XXXXXX:XXX.XX:XX  On |                  N/A |
|  0%   45C    P8             13W /  170W |     817MiB /   6144MiB |      6%      Default |
|                                         |                        |                  N/A |
+-----------------------------------------+------------------------+----------------------+
</code></pre></div></div> <h3 id="step-2-understanding-the-output">Step 2: Understanding the Output</h3> <p>The <code class="language-plaintext highlighter-rouge">nvidia-smi</code> command reveals a wealth of information. The key sections to focus on include:</p> <ul> <li>The first row displays the <strong>NVIDIA-SMI version</strong>, <strong>Driver Version</strong>, and <strong>CUDA Version</strong>.</li> <li><strong>NVIDIA-SMI Version:</strong> Indicates the version of the NVIDIA System Management Interface (SMI) tool you‚Äôre using.</li> <li><strong>Driver Version and CUDA Version:</strong> Ensures you have the right software for GPU-accelerated tasks.</li> <li>In the lower two rows, the upper row is the header, and the lower row is the actual data. This has information about the actual GPU Name, memory usage, GPU utilisation, etc.</li> <li><strong>GPU Details:</strong> Shows the model (NVIDIA GeForce RTX 2060) and important metrics like temperature and power usage</li> <li><strong>Memory Usage:</strong> Indicates how much GPU memory is used and available.</li> <li><strong>GPU Utilisation:</strong> Provides insights into how much of your GPU‚Äôs capacity is being used.</li> </ul> <blockquote> <p>üìù You can use other versions of the command - <code class="language-plaintext highlighter-rouge">nvidia-smi -L</code> to list the GPUs in your system and <code class="language-plaintext highlighter-rouge">nvidia-smi -q</code> to get detailed information about your GPU.</p> </blockquote> <h3 id="step-3-counting-your-gpu-cores">Step 3: Counting Your GPU Cores</h3> <p>If you‚Äôre curious about the number of CUDA cores in your GPU, while <code class="language-plaintext highlighter-rouge">nvidia-smi</code> doesn‚Äôt directly provide this information, you can look up your GPU model‚Äôs specifications. For instance, the <a href="https://www.google.com.au/search?q=NVIDIA+GeForce+RTX+2060+number+of+cores&amp;newwindow=1&amp;sca_esv=d8dafcc4ab3fc50a&amp;sxsrf=ADLYWII8hMarNEZYed2PKUl4mFf4xsex_w%3A1735072723984&amp;ei=0xtrZ9rfO7DLseMPma3H-QQ&amp;ved=0ahUKEwialf3KocGKAxWwZWwGHZnWMU8Q4dUDCBA&amp;uact=5&amp;oq=NVIDIA+GeForce+RTX+2060+number+of+cores&amp;gs_lp=Egxnd3Mtd2l6LXNlcnAiJ05WSURJQSBHZUZvcmNlIFJUWCAyMDYwIG51bWJlciBvZiBjb3JlczIGEAAYFhgeMgYQABgWGB4yBhAAGBYYHjILEAAYgAQYhgMYigUyCxAAGIAEGIYDGIoFMgsQABiABBiGAxiKBTIIEAAYogQYiQUyBRAAGO8FMgUQABjvBTIFEAAY7wVIwxtQVVi0GnADeAGQAQCYAe0FoAHYHaoBDTAuNS4yLjAuMi4wLjK4AQPIAQD4AQGYAg6gAqIfwgIFECEYoAHCAggQABgWGAoYHsICBxAhGKABGAqYAwCSBwszLjMuNC4wLjIuMqAHgEg&amp;sclient=gws-wiz-serp">NVIDIA GeForce RTX 2060</a> typically has <strong>1920 CUDA cores</strong>, <strong>240 Tensor cores</strong> and <strong>30 RT cores</strong>. Note that a GPU can have different types of cores, each serving a specific purpose:</p> <ul> <li><strong>CUDA Cores</strong>: Versatile for general computation and rendering.</li> <li><strong>Tensor Cores</strong>: Specialized for deep learning tasks, speeding up matrix-heavy operations.</li> <li><strong>RT Cores</strong>: Focused on real-time ray tracing, revolutionizing visual realism in graphics.</li> </ul> <p>You might want to find this information programmatically, for which you might need to rely on Python‚Äôs numba module (open source compiler for translating Python and NumPy code into a fast machine code). Here‚Äôs a Python script (thanks to <a href="https://stackoverflow.com/questions/63823395/how-can-i-get-the-number-of-cuda-cores-in-my-gpu-using-python-and-numba">StackOverflow post</a>) that can help you <strong>identify the number of CUDA cores</strong> in your GPU:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">numba</span> <span class="kn">import</span> <span class="n">cuda</span>

<span class="c1"># Dictionary mapping compute capabilities to cores per SM
</span><span class="n">cc_cores_per_SM_dict</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">):</span> <span class="mi">32</span><span class="p">,</span>
    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span> <span class="mi">48</span><span class="p">,</span>
    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">):</span> <span class="mi">192</span><span class="p">,</span>
    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">):</span> <span class="mi">192</span><span class="p">,</span>
    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">):</span> <span class="mi">192</span><span class="p">,</span>
    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">):</span> <span class="mi">128</span><span class="p">,</span>
    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">):</span> <span class="mi">128</span><span class="p">,</span>
    <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">):</span> <span class="mi">64</span><span class="p">,</span>
    <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span> <span class="mi">128</span><span class="p">,</span>
    <span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">0</span><span class="p">):</span> <span class="mi">64</span><span class="p">,</span>
    <span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">):</span> <span class="mi">64</span><span class="p">,</span>
    <span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">0</span><span class="p">):</span> <span class="mi">64</span><span class="p">,</span>
    <span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">):</span> <span class="mi">128</span><span class="p">,</span>
    <span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">):</span> <span class="mi">128</span><span class="p">,</span>
    <span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">0</span><span class="p">):</span> <span class="mi">128</span>
<span class="p">}</span>

<span class="c1"># Get the current device
</span><span class="n">device</span> <span class="o">=</span> <span class="n">cuda</span><span class="p">.</span><span class="nf">get_current_device</span><span class="p">()</span>

<span class="c1"># Retrieve the number of SMs
</span><span class="n">num_sms</span> <span class="o">=</span> <span class="n">device</span><span class="p">.</span><span class="n">MULTIPROCESSOR_COUNT</span>

<span class="c1"># Retrieve the compute capability
</span><span class="n">compute_capability</span> <span class="o">=</span> <span class="n">device</span><span class="p">.</span><span class="n">compute_capability</span>

<span class="c1"># Get the number of cores per SM based on compute capability
</span><span class="n">cores_per_sm</span> <span class="o">=</span> <span class="n">cc_cores_per_SM_dict</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">compute_capability</span><span class="p">,</span> <span class="sh">"</span><span class="s">Unknown</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Calculate total cores
</span><span class="k">if</span> <span class="n">cores_per_sm</span> <span class="o">!=</span> <span class="sh">"</span><span class="s">Unknown</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">total_cores</span> <span class="o">=</span> <span class="n">cores_per_sm</span> <span class="o">*</span> <span class="n">num_sms</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">GPU Compute Capability: </span><span class="si">{</span><span class="n">compute_capability</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Number of SMs: </span><span class="si">{</span><span class="n">num_sms</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Cores per SM: </span><span class="si">{</span><span class="n">cores_per_sm</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Total CUDA Cores: </span><span class="si">{</span><span class="n">total_cores</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Compute capability </span><span class="si">{</span><span class="n">compute_capability</span><span class="si">}</span><span class="s"> is not recognized.</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p><strong>SM</strong> here in the code refers to Streaming Multiprocessor (SM) which is a fundamental unit of parallel processing in GPUs (analogous to cores in CPUs). Each SM contains multiple CUDA cores, along with other resources like shared memory and instruction schedulers. SMs are responsible for executing instructions and performing computations in parallel, making them crucial for the GPU‚Äôs performance.</p> <p>This script will help you identify the number of CUDA cores in your GPU. This is the output I got for my NVIDIA GeForce RTX 2060:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GPU Compute Capability: (7, 5)
Number of SMs: 30
Cores per SM: 64
Total CUDA Cores: 1920
</code></pre></div></div> <p>With these steps, you can at least inspect your GPU and understand its specifications. This knowledge will be crucial as you dive into GPU-accelerated data analysis, machine learning, and other computational tasks. Happy computing!</p> <h3 id="additional-resources">Additional Resources</h3> <ul> <li><a href="https://learn.microsoft.com/en-us/windows/ai/directml/gpu-accelerated-training">GPU-accelerated ML Training with WSL</a></li> <li><a href="https://numba.readthedocs.io/en/stable/index.html"><code class="language-plaintext highlighter-rouge">numba</code> documentation</a></li> <li><a href="https://numba.readthedocs.io/en/0.52.0/roc/index.html">Numba for AMD ROC GPUs</a></li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="external-services"/><category term="GPU"/><category term="WSL2"/><category term="CUDA"/><category term="NVIDIA"/><summary type="html"><![CDATA[A guide to help you identify your GPU and its specifications via Windows Subsystem for Linux 2 (WSL2).]]></summary></entry><entry><title type="html">Creating Flowcharts with Mermaid</title><link href="https://himal2007.github.io/blog/2024/mermaid/" rel="alternate" type="text/html" title="Creating Flowcharts with Mermaid"/><published>2024-06-04T17:05:00+00:00</published><updated>2024-06-04T17:05:00+00:00</updated><id>https://himal2007.github.io/blog/2024/mermaid</id><content type="html" xml:base="https://himal2007.github.io/blog/2024/mermaid/"><![CDATA[<h1 id="creating-flowcharts-with-mermaid">Creating Flowcharts with Mermaid</h1> <p>Flowcharts are an integral part of my work. Whether it‚Äôs mapping out processes, planning projects, or visualizing ideas, a good flowchart can make all the difference. Over time, I‚Äôve experimented with various tools to create these diagrams. Here, I want to share my experience with Mermaid, a powerful tool for creating flowcharts and other diagrams using simple code.</p> <h2 id="the-hunt-for-the-perfect-flowchart-tool">The Hunt for the Perfect Flowchart Tool</h2> <p>I‚Äôve tried several tools in my quest for the perfect flowchart creator. Here are some honorable mentions:</p> <ul> <li><strong>draw.io</strong>: A versatile and user-friendly diagramming tool.</li> <li><strong>Excalidraw</strong>: Great for hand-drawn style diagrams and recently added support for Mermaid.</li> <li><strong>Lucidchart</strong>: A robust, professional-grade diagramming application.</li> </ul> <p>These tools are fantastic, but I needed something that could be seamlessly embedded within markdown documents, which led me to discover Mermaid.</p> <h2 id="what-is-mermaid">What is Mermaid?</h2> <p>Mermaid is a tool that allows you to create diagrams and visualizations using a simple and easy-to-read code syntax. It‚Äôs particularly useful for embedding within markdown documents, making it perfect for documentation and collaborative projects.</p> <h3 id="why-mermaid">Why Mermaid?</h3> <ol> <li><strong>Markdown Integration</strong>: Mermaid lets you embed flowcharts directly within your markdown files. This keeps everything in one place and makes your documents more dynamic and interactive.</li> <li><strong>Code-based Diagrams</strong>: With Mermaid, you write diagrams as code. This approach is not only efficient but also allows for version control and easy updates.</li> <li><strong>Versatility</strong>: Beyond flowcharts, Mermaid supports Gantt charts, sequence diagrams, class diagrams, and more.</li> </ol> <h3 id="creating-a-flowchart-with-mermaid">Creating a Flowchart with Mermaid</h3> <p>Here‚Äôs an example of how you can create a simple flowchart using Mermaid:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">mermaid
</span><span class="sb">graph TD
    A[Start] --&gt; B{Is it working?}
    B --&gt;|Yes| C[Continue]
    B --&gt;|No| D[Fix it]
    D --&gt; B</span>
<span class="p">```</span>
</code></pre></div></div> <p>This code snippet generates a flowchart below with decision points and actions. Make sure to add to add <code class="language-plaintext highlighter-rouge">mermaid</code> tag in the code block to enable Mermaid rendering. Also, you need to enable Mermaid rendering in the YAML front matter of your markdown file with <code class="language-plaintext highlighter-rouge">mermaid: enabled: true</code>.</p> <pre><code class="language-mermaid">graph TD
    A[Start] --&gt; B{Is it working?}
    B --&gt;|Yes| C[Continue]
    B --&gt;|No| D[Fix it]
    D --&gt; B
</code></pre> <h2 id="exporting-charts">Exporting Charts</h2> <p>One of my initial concerns was how to export these charts in high-quality formats like PDF or PNG. Thankfully, I found the <strong>Mermaid Live Editor</strong>. This online tool allows you to create, preview, and export your Mermaid diagrams easily. It‚Äôs very similar to Leaflet and operates on a freemium model.</p> <h2 id="interactive-features">Interactive Features</h2> <p>When rendered within a markdown document, Mermaid charts offer neat interactive features:</p> <ul> <li><strong>Zoom</strong>: Easily zoom in and out to focus on different parts of your chart.</li> <li><strong>Rotate</strong>: Rotate your diagrams to get a better view or fit them into your layout.</li> </ul> <h2 id="extra-capabilities-with-mermaid">Extra Capabilities with Mermaid</h2> <p>Mermaid is continuously evolving, and there are several additional features worth mentioning:</p> <ul> <li><strong>Integration with Excalidraw</strong>: Excalidraw now supports Mermaid, allowing you to combine hand-drawn elements with code-based diagrams.</li> <li><strong>AI Features</strong>: Tools like GitHub Copilot can help you generate flowcharts from text descriptions. For example, using <a href="https://github.com/marketplace/actions/export-mermaidjs-erdiagrams-from-database">this GitHub Action</a>, you can convert database schemas to ER diagrams with ease.</li> <li><strong>Image Conversion</strong>: You can even convert images into flowcharts using advanced AI capabilities.</li> </ul> <p>In conclusion, Mermaid is a fantastic tool for anyone who needs to create and embed flowcharts and other diagrams within markdown documents. It‚Äôs easy to use, highly versatile, and offers excellent integration with other tools and platforms. If you‚Äôre in the market for a flowchart tool, give Mermaid a try ‚Äì it might just be the perfect solution for your needs!</p>]]></content><author><name></name></author><category term="tools"/><category term="flowcharts"/><category term="mermaid"/><summary type="html"><![CDATA[My experience with mermaid for creating flowcharts and diagrams using simple code.]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://himal2007.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://himal2007.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://himal2007.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[We‚Äôre sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://himal2007.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://himal2007.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://himal2007.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry></feed>